@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Services;
@inherits PanelComponent

<root class="@((_paused||_gameOver) ? "" : "hide")">
    <div class="pauseMenu @(_gameOver ? "hide" : "")">
        <h1>Fishies</h1>
        <div class="button play" onclick=@onPaused>Play</div>
        <div class="button restart" onclick=@onRestart>Restart</div>
        <div class="button quit" onclick=@onQuit>Quit</div>
    </div>
    <div class="gameOverMenu @(_gameOver ? "" : "hide")">
        <h1>Fishies</h1>
        <h2>Game over</h2>
        <p>Your score: @_score</p>
        <div class="button restart" onclick=@onRestart>Restart</div>
        <div class="button quit" onclick=@onQuit>Quit</div>
    </div>
    <div class="leaderboard">
        <div class="title">@_leaderboard.DisplayName</div>
        @foreach (var e in _leaderboard.Entries)
            {
            <div class="item">&#x23;@e.Rank @e.DisplayName - @e.Value</div>
            }
    </div>
</root>

@code
{
    [Property]
    public GameObject Player { get; set; }

    private bool _paused = true;
    private bool _gameOver = false;
    private int _score;
    private GameResource _savestate;
    private Leaderboards.Board _leaderboard = Sandbox.Services.Leaderboards.Get("score");

    protected override void OnStart()
    {
        _getLeaderboard();

        _savestate = Scene.Save();
        Player.Children.FirstOrDefault().Components.Get<UnitInfo>().OnDeath += onDeath;
    }

    private async void _getLeaderboard(){
        _leaderboard.Group = "Global";
        _leaderboard.MaxEntries = 10;

        await _leaderboard.Refresh();
    }

    protected override void OnUpdate()
    {
        base.OnUpdate();

        if (Input.EscapePressed)
        {
            _paused = !_paused;
        }

        _score = Player.Components.Get<Player>().Kills;
        _gameOver = !Player.Children.FirstOrDefault().Components.Get<UnitInfo>().IsValid();

        Scene.TimeScale = (_paused||_gameOver) ? 0 : 1;
    }

    void onDeath(GameObject gameObject)
    {
        Log.Info("updated leaderboard score");
        Sandbox.Services.Stats.SetValue("score", Player.Components.Get<Player>().Kills);
    }

    async void onPaused()
    {
        await _leaderboard.Refresh();
        _paused = !_paused;
    }

    void onQuit()
    {
        Sandbox.Services.Stats.SetValue("score", Player.Components.Get<Player>().Kills);
        Game.Close();
    }

    void onRestart()
    {
        Sandbox.Services.Stats.SetValue("score", Player.Components.Get<Player>().Kills);
        Scene.Load(_savestate);
    }


    protected override int BuildHash() => System.HashCode.Combine(_paused, _gameOver, _score, _leaderboard.DisplayName);
}
